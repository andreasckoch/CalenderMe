syntax = "proto2";

// using protobuf 3.6.1 from src dir: "protoc -I=. --java_out=. ./calender_messages.proto" to create java file
// in protobuf/java dir: protoc --java_out=core/src/main/java -I../src ../src/google/protobuf/descriptor.proto
// then copy com dir from core/src/main/java in src dir of this project (if not done already)

package proto;
option java_outer_classname = "CalenderMessagesProto";

// wrapper message for coherent deciphiring of bytestream on server side
message Basic {
	enum MessageType {
		LOGIN = 0;
		REGISTRATION = 1;
		PROFILE = 2;
		ERROR = 3;
		SUCCESS = 4;
		PERSON = 5;
		CONTACTS = 6;
		GROUP = 7;
		GROUPS = 8;
		CONDITIONS = 9;
		APPOINTMENT = 10;
		APPOINTMENTS = 11;
		TIMESLOT = 12;
		TIMESLOTS = 13;
		REQUEST = 14;
	}
	required MessageType type = 15;
	optional Login login = 1;
	optional Registration registration = 2;
	optional Profile profile = 3;
	optional Error error = 4;
	optional Success sucess = 5;
	optional Person person = 6;
	optional Contacts contacts = 7;
	optional Group group = 8;
	optional Groups groups = 9;
	optional Conditions conditions = 10;
	optional AppointmentMsg appointment = 11;
	optional Appointments appointments = 12;
	optional TimeSlot timeSlot = 13;
	optional TimeSlots timeSlots = 14;
	optional Request request = 16;
}


/*
 * Messages server might get
 */


message Login {
	required string email = 1;
	required string password = 2;
}

message Registration {
	required string email = 1;
	required string password = 2;
	optional bool change_email = 3;
	optional bool change_password = 4;
	optional string changed_field = 5;
	optional bool delete_account = 6;
}

message Profile {
	required string email = 1;
	optional string name = 2;
	optional string location = 3;
	optional string bio = 4;
	optional string organisation = 5;
}

/*
 * Functionality:
 * 1) Create new group by specifying admins, members, name, description
 * 2) Quit group (removes only the person the message is from)
 * 3) As an admin, remove members from group
 * 4) As an admin, promote members to admins
 */
message Group {
	required string email = 1;
	optional string id = 2;
	optional string name = 3;
	repeated Person admins = 4;
	repeated Person members = 5;
	optional string description = 6;
	optional bool quit = 7;
	repeated Person remove_members = 8;
	repeated Person promote_to_admins = 9;
	optional bool change_info = 10; // name or description
}

message AppointmentMsg {
	optional string initiator = 1;
	repeated Person attendants = 2;
	optional int64 start_unix_time = 3;
	optional int32 length = 4; // in ms
	optional string location = 5;
	optional string name = 6;
	optional string description = 7;
	optional int64 deadline_unix_time = 8;
	optional bool flexible = 9;
	optional int32 min_attendants = 10;
	repeated Person key_attendants = 11;
	optional string group_id = 12;
	optional Conditions conditions = 13;
	optional Category category = 14;
	optional bool only_same_category = 19;
	optional int64 start_unix_timeframe = 20; // timeframe (max 6 weeks) for consideration for appointment
	optional int64 end_unix_timeframe = 21;

	// interacting with existing appointment
	optional string email = 15;
	optional string id = 16;

	// as attendee
	optional Answer confirm_appointment = 17;

	// as initiator
	optional int32 index_of_dates_list = 18; // of list of possible dates calculated by server
	optional bool add_participants = 25;
	optional bool remove_participants = 26;
	repeated Person add_attendants = 22;
	repeated Person add_key_attendants = 23;
	repeated Person remove_participant = 24;

	// as both
	optional bool get_info = 27;

	enum Category {
		UNKNOWN = 0;
		BUSINESS = 1;
		SOCIAL = 2;
		SPORT = 3;
		HOBBIES = 4;
		PRIVATE = 5;
		COMMUTE = 6;
	}

	enum Answer {
		NONE = 0;
		CONFIRM = 1;
		CANCEL = 2;
		UNDECIDED = 3;
	}
}


/*
 * Timeslots msg can either be used for regular timeslots or for a template.
 * template rules: - time given in milliseconds
 * 				   - slots are relative to start of first day [10 o'clock on first day is thus 10 * 3600 * 1000 ms]
 * 				   - templates are always defined for a 2 week time interval
 * timeslot rules: - server replaces old timeslots with new ones each time they are updated
 * removing timeslots: - takes one timeslot in timeslots as input
 * 					   - only timeslots within this sole transmitted timeslot are removed
 * removing template: - whole template is removed
 */

message TimeSlots {
	required string email = 1;
	repeated TimeSlot slots = 2;
	optional bool update_template = 3;
	optional bool remove_timeslots = 4;
	optional bool remove_template = 5;
}


message Request {
	required Basic basic = 1;
}


message Error {
	optional string error_message = 1;
}


message Success {
	optional string success_message = 1;
}


/*
 *	Client Messages
 */
message ClientBasic {
	enum MessageType {
		ERROR = 0;
		SUCCESS = 1;
		GROUP_RESPONSE = 2;
		MEMBER_GROUP_RESPONSE = 3;
		APPOINTMENT_INIT_RESPONSE = 4;
		APPOINTMENT_ATTENDANT_RESPONSE = 5;
		}
	required MessageType type = 1;
	optional Error error = 2;
	optional Success success = 3;
	optional ClientGroupResponse groupResponse = 4;
	optional ClientGroupMemberResponse groupMemberResponse = 5;
	optional ClientInitAppointment clientInitAppointment = 6;
	optional ClientAttendantAppointment clientAttendantAppointment = 7;
}



message ClientGroupResponse {
	optional string id = 1;
}

message ClientGroupMemberResponse {
	optional string id = 1;
	optional string name = 2;
	repeated Person admins = 3;
	repeated Person members = 4;
	optional string description = 5;
	optional bool admin = 6;
}

message ClientInitAppointment {
	optional string id = 1;
	repeated int64 possible_dates = 2;
	}

message ClientAttendantAppointment {
	optional string id = 1;

	// answer to news update of attendant once initiator decided on a date
	optional int64 suggested_date = 2;

	// as answer to get_info
	optional string initiator = 3;
	repeated Person attendants = 4;
	optional int64 start_unix_time = 5;
	optional int32 length = 6; // in ms
	optional string location = 7;
	optional string name = 8;
	optional string description = 9;
	optional int64 deadline_unix_time = 10;
	optional bool flexible = 11;
	optional int32 min_attendants = 12;
	optional string group_id = 13;
	optional Conditions conditions = 14;
	optional AppointmentMsg.Category category = 15;
	}



/*
 * Helper messages for constructing other messages
 * Server and Client do not get these!
 */


message Person {
	required string email = 1; // not sure whether it's smart to send other stuff to
}


message PersonExtended {
	required string email = 1;
	optional Profile profile = 2;
	optional TimeSlots time_slots = 3;
	optional Contacts contacts = 4;
	optional Groups groups = 5;
	optional Appointments appointments = 6;
}


message Contacts {
	required string email = 1;
	repeated Person contacts = 2;
}


message Groups {
	required string email = 1;
	repeated Group groups = 2;
}


message Conditions {
	enum Weather {
		UNKNOWN = 0;
		SUNNY = 1;
		RAIN = 2;
		HOT = 3;
		COLD = 4;
		SNOW = 5;
		WIND = 6;
		CLOUDS = 7;
	}
	optional Weather weather = 1;
}


message Appointments {
	required string email = 1;
	repeated AppointmentMsg appointments = 2;
}


/*
 * start- and end-time: unix_time but in milliseconds
 */

message TimeSlot {
	required int64 start_unix_time = 1;
	required int64 end_unix_time = 2;
	optional AppointmentMsg.Category category = 3;
}

